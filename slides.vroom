---- config
title: Introducing Acmeism
indent: 5
height: 26
width: 70
vim: gvim -c 'set fullscreen'
guifont: Bitstream_Vera_Sans_Mono:h24
# skip: 5

---- center
Introducing Acmeism

by Ingy döt Net

OSDC.fr - 2 October 2009 - Paris

----
== WWWWWTF is going on here?

+* Who?
+  * Ingy döt Net
+* Why?
+  * Sébastien!
+* What?
+  * ACMEISM!
+* Where?
+  * Ici!
+* When?
+  * Maintenant!

----
== What is Acmeism??

* I will tell you.
* But first I must explain...

----
== Wh(at|y) is Ingy?

* College, Libraries
  * IBM 370 Assembler - 1982, Punch cards
* WWW
  * Perl - 1998
* Inline.pm
  * C, C++, Python, Java, Lua, Befunge - 40 Language Bindings
* YAML
  * Perl, Python, Ruby, PHP, Java, JavaScript, C
* Jemplate
  * Perl, JavaScript
* pQuery
  * Perl, JavaScript
* YAML::Perl
  * Python, Perl

  -- There's a theme to this work...

----
== So What is Acmeism??

+* It's a word I made up
+* To describe the theme to my programming ideas
+* It's a word that I own stock in
  * acmeism.(com|org|net)
  * http://google.com
+* It's a defunct Russian Poetry Movement
  * 1910-1912 in St Petersburg
+* It's a nod to "the best" Perl modules
  * like Acme::Bleach
  * and Acme::Scurvy::Whoreson::BilgeRat::Backend::pirate

+* I noticed a theme to my programming ideas
* I decided to call it "Acmeism"
  
----
== Plats du Jour

* Acmeism - A new religion
* Vroom - This slide software
* GitHub - My Acmeist garbage dump
* YAML - A data serialization language
* TestML - A new unit test language
* C'Dent - A new programming language

----
== The 10 Rules of Acmeism

The first rule of Acmeism is:

+1) YOU DON'T TALK ABOUT ACMEISM!

+Just kidding :)

----
== The 10 Rules of Acmeism

1) All programming languages are the same
2) Programming languages never die

+3) Programming languages divide programmers
4) Programmer communities need to be united

+5) Modules are the key to good programming
6) Modules need to be shared (ported) across languages

+7) ... under construction ...
8)
9)
10)

----
== All languages are the same!

* Natural languages are how people communicate with people
  * Français, English, 中文
  * The people and ideas are all the same
* Tower of Babel
  * Language is a barrier

+* Computer languages are how people communicate with computers
  * Python, Ruby, Perl, PHP, Java
  * The programmers and ideas are all the same
* Tower of OSDC
  * Languages are BARRIERS

----
== The OSCON Languages

* Acmeism is in *theory* about all programming languages
* In *practice* it is about:

  * Perl
  * Python
  * Ruby
  * PHP
  * JavaScript

* These are the languages of OSDC!
* They are the languages of O'Reilly
* They are the languages of JSON and YAML

----
== Proof of Acmeism

The following is a simple program that takes an object and uses
YAML to dump it, load the result and dump it again. It compares
the two dumps to see if they are equal.

This program is written in 6 different languages.

---- include yaml-examples

----
== Languages never die!

* Maybe everyone in the world should use one language.
  * Français??
  * English??
  * 中文??
+* NO WAY!

+* What about programming languages?
* Someone asked me, "Isn't Perl dead?"
+   * NO WAY!
   * YAPC::*
* COBOL jobs are still available!

* Programming languages never die
* In fact, they breed
* Even during OSDC talks!

----
== Modules, Modules, Modules

* Modules are the integrated circuits of software
* All Acmeist languages have great module support
* Great modules should be ported to all Acmeist languages
* Modules can use simple, portable code
* Modules should have common tests

----
== Perl 5 and Perl 6

* Rakudo is the new Perl 6 engine
* Perl 6 is vastly different from Perl 5
* All the good modules need to be rewritten
* It would be great if they passed the same tests
* 

----
== Acmeist Technologies

* XML?
* YAML
* JSON
* Rx

----

== YAML Ain't Markup Language

Q: What is YAML?
+A: YAML is a Serialization Language

From Wikipedia:

    * XML  is a ... MARKUP LANGUAGE...
    * JSON is a ... DATA INTERCHANGE FORMAT
    * YAML is a ... DATA SERIALIZATION FORMAT

+   YAML is THE ONLY interlingual *Data Serialization* Language.

    [ Ruby, Perl, Python, PHP, Java, Haskell, JavaScript ]

----
== YAML and JSON

* JSON has a simple Data Model

* Mappings/Hashes/Dictionaries (w/ string keys)
* Sequences/Arrays/Lists
* Scalars (Strings, Numbers, Boolean, Null)

+* YAML has the same data model

* Add types
* Add references
* Add complex keys

+* This is the "Acmeist Data Model"

----
        JSON Model Grammar

    JSON   := (MAP | ARRAY)
    NODE   := (MAP | ARRAY | SCALAR)
    MAP    := (STRING, NODE)*
    ARRAY  := NODE*
    SCALAR := (string | number | boolean | null)

+        YAML Model Grammar

    YAML := NODE*
    NODE := (typed)(MAP | ARRAY | SCALAR | ALIAS)
    MAP := (NODE, NODE)*
    ARRAY := NODE*
    SCALAR := typed_string


----
== Introduction to YAML by Examples

---- yaml,i4
# Example 1
--- !
  ? ~: #
  : &_ '''
{@#$%}'#: *++
  [_: ^^]: ...

---- perl,i4
# Obfuscated YAML, FTW!
$VAR1 = bless( {
                 'ARRAY(0x80f640)' => '...',
                 'HASH(0x80f5b0)' => '\' {@#$%}'
               }, 'main' );

----
== All JSON is YAML

* JSON is a pure subset of YAML

{"JSON": "Data Interchange", "YAML": "Data Serialization",
"Features": ["Simple", "Sharable"]

+JSON: Data Interchange
YAML: Data Serialization
Features: [Simple, Sharable]

+JSON: Data Interchange
YAML: Data Serialization
Features: 
- Simple
- Sharable

----
== YAML - The Book

* I am writing an O'Reilly book on YAML
* Available in early 2010

----
== YAML and Acmeism

* YAML is hard to implement
  * Ingy has failed more than once
* It has a 7 layer stack (in both directions)
* PyYaml is the reference implemenation
  * Kirill Siminov
* Ported to C - libyaml
* Ported to Ruby and Java
* Ported to Perl by Ingy

* This gave birth to:
  * Acmeism
  * TestML
  * C'Dent

----
== YAML Porting

* Compare PyYaml vs YAML::Perl modules.

----
== TestML

* JSON implementations should pass the same tests
* YAML implementations should pass the same tests
* Rx implementations should...

* Perl 5 modules ported to Perl 6...
* Anything ported to anything!

+* Things that pass the same tests are the same...
* If not...
* Write more tests!

----
== TestML

* TestML is a data driven unit test language
* It is programming language agnostic
* It is the foundation of Acmeism
* Necessary predecessor to C'Dent

* http://testml.org

----
== C'Dent

* C'Dent is a new programming language
* Built out of old ones
* It is a module porting language
* WOUE - Write Once, Upload Everywhere

----
== GitHub

* All my public work is on GitHub
* INCLUDING THIS TALK

        http://github.com/ingydotnet/

* Many Acmeist projects
* Most repositories have an extension
  * -pm -> Perl
  * -py -> Python
  * -js -> JavaScript
  * -cd -> C'Dent
  * -tml -> TestML Suites
  * ->talk -> Presentations like this one

----
== GitHub gh-pages

* GitHub gh-pages branches give you a project website

    http://ingydotnet.github.com/acmeism-osdcfr2009-talk/

---- center
The End

Any Questions?

http://ingydotnet.github.com/acmeism-osdcfr2009-talk/
